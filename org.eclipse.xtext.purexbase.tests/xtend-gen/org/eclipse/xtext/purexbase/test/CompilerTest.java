/**
 * Copyright (c) 2012 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtext.purexbase.test;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.purexbase.test.RuntimeInjectorProvider;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.compiler.CompilationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(RuntimeInjectorProvider.class)
@SuppressWarnings("all")
public class CompilerTest {
  @Rule
  @Inject
  public TemporaryFolder temporaryFolder;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void literals() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Literals are notations for representing fixed values.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Xbase only has literals for the most important data types ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* predefined.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/ ");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("// Null Literal");
      _builder.newLine();
      _builder.append("null");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// String Literal");
      _builder.newLine();
      _builder.append("\'Hello World\'");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// Number Literals are mostly like in Java");
      _builder.newLine();
      _builder.append("// (consult the documentation for more details)");
      _builder.newLine();
      _builder.append("42");
      _builder.newLine();
      _builder.append("0.42e2");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// Boolean Literal");
      _builder.newLine();
      _builder.append("true");
      _builder.newLine();
      _builder.append("false");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// Class Literal (in java : String.class)");
      _builder.newLine();
      _builder.append("typeof(String)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// Collection literals are down using a library approach.");
      _builder.newLine();
      _builder.append("newArrayList(3,5,7)");
      _builder.newLine();
      _builder.append("newHashSet(\'foo\',\'bar\',\'baz\')");
      _builder.newLine();
      _builder.append("newHashMap( 1->\'one\', 2->\'two\', 3->\'three\' )");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// Into the bargain, there are number literals for ");
      _builder.newLine();
      _builder.append("// java.math.BigInteger and java.math.BigDecimal");
      _builder.newLine();
      _builder.append("0xbeef_beef_beef_beef_beef#BI");
      _builder.newLine();
      _builder.append("0.123_456_789_123_456_789_123_456_789_123_456_789e4242BD");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import java.math.BigDecimal;");
      _builder_1.newLine();
      _builder_1.append("import java.math.BigInteger;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public BigDecimal myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("BigDecimal _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* null */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* \"Hello World\" */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* 42 */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* 0.42e2 */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* true */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* false */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* String.class */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* CollectionLiterals.<Integer>newArrayList(Integer.valueOf(3), Integer.valueOf(5), Integer.valueOf(7)); */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* CollectionLiterals.<String>newHashSet(\"foo\", \"bar\", \"baz\"); */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Pair<Integer, String> _mappedTo = Pair.<Integer, String>of(Integer.valueOf(1), \"one\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Pair<Integer, String> _mappedTo_1 = Pair.<Integer, String>of(Integer.valueOf(2), \"two\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Pair<Integer, String> _mappedTo_2 = Pair.<Integer, String>of(Integer.valueOf(3), \"three\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* CollectionLiterals.<Integer, String>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2); */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* new BigInteger(\"beefbeefbeefbeefbeef\", 16) */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = new BigDecimal(\"0.123456789123456789123456789123456789e4242\");");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void featureCalls() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import org.eclipse.xtext.purexbase.test.data.Person");
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Xbase comes with sugared accessor syntax for getter and setter ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* methods");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("val person = new Person()");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// setting");
      _builder.newLine();
      _builder.append("person.forename = \'Jimi\'");
      _builder.newLine();
      _builder.append("person.name = \'Hendrix\'");
      _builder.newLine();
      _builder.newLine();
      _builder.append("// accessing");
      _builder.newLine();
      _builder.append("person.forename +\' \'+ person.name");
      _builder.newLine();
      _builder.append("// Jimi Hendrix (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("// static features can be accessed using ::");
      _builder.newLine();
      _builder.append("java::util::Collections::singleton(\"So lonely\") ");
      _builder.newLine();
      _builder.append("System::err.println()");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import java.util.Collections;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.purexbase.test.data.Person;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public void myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("final Person person = new Person();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("person.setForename(\"Jimi\");");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("person.setName(\"Hendrix\");");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("String _forename = person.getForename();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("String _plus = (_forename + \" \");");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("String _name = person.getName();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("/* (_plus + _name); */");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Collections.<String>singleton(\"So lonely\");");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("System.err.println();");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void variableDeclarations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Xbase variable declarations look a bit different to those in Java.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("val x = \'A final value\'");
      _builder.newLine();
      _builder.append("// A final value (void)");
      _builder.newLine();
      _builder.append("var y = \'A non-final variable\'");
      _builder.newLine();
      _builder.append("// A non-final variable (void)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//x = \'not allowed\'");
      _builder.newLine();
      _builder.append("y = \'can be modified\'");
      _builder.newLine();
      _builder.append("// can be modified (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The type can be specified optionally");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("val String s = \"my String\"");
      _builder.newLine();
      _builder.append("// my String (void)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Generally, variable Declarations are only allowed within a block. In");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* this language (pure xbase) the whole script is one block expression, ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* which is why variable declarations are allowed without curly braces.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* A block expression is just a list of expressions which are all ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* executed. The result and the type are computed from the last ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* expression. They can be used in a deeply nested fashion.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("val s1 = \'foo\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("s + s1");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("// foo (String)");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public String myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("String _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final String x = \"A final value\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("String y = \"A non-final variable\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("y = \"can be modified\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final String s = \"my String\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("String _xblockexpression_1 = null;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("final String s1 = \"foo\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("_xblockexpression_1 = (s + s1);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = _xblockexpression_1;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void casts() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Casts work like in Java, but have a different (more readable and ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* more tooling friendly) syntax");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* When in Java you write ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*   ((String)obj) ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* in Xbase you write ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*   (obj as String)");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("val CharSequence s = \'foo\'");
      _builder.newLine();
      _builder.newLine();
      _builder.append("(s as String).length");
      _builder.newLine();
      _builder.append("// 3 (int)");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public int myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("int _xblockexpression = (int) 0;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final CharSequence s = \"foo\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = ((String) s).length();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void closures() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* A closures is an anonymous function which can access variables from ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* the outer lexical scope.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("val x = \'Hello \'");
      _builder.newLine();
      _builder.append("val f = [ String e | x + e ]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("f.apply(\'World!\')");
      _builder.newLine();
      _builder.append("// Hello World! (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The square brackets are optional if a closure is passed as the ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* single parameter to a method. Also the parameter types are optional ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* if they can be inferred from the context.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("val list = newArrayList(\'a\', \'b\', \'c\')");
      _builder.newLine();
      _builder.newLine();
      _builder.append("list.map( e | e.toUpperCase )");
      _builder.newLine();
      _builder.append("// [A, B, C] (List<String>)");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The type signature of a closure is written like this ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*   (ParamType) => ReturnType");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("val (String)=>String f2 = [ e | e.toUpperCase ]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("f2.apply(\'simsalabim\')");
      _builder.newLine();
      _builder.append("// SIMSALABIM (String)");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.ListExtensions;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public String myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("String _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final String x = \"Hello \";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Function1<String, String> _function = new Function1<String, String>() {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("public String apply(final String e) {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("return (x + e);");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Function1<String, String> f = _function;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("f.apply(\"World!\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\"a\", \"b\", \"c\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Function1<String, String> _function_1 = new Function1<String, String>() {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("public String apply(final String e) {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("return e.toUpperCase();");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* ListExtensions.<String, String>map(list, _function_1); */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Function1<String, String> _function_2 = new Function1<String, String>() {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("public String apply(final String e) {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("return e.toUpperCase();");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Function1<? super String, ? extends String> f2 = _function_2;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = f2.apply(\"simsalabim\");");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ifExpression() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The if expression looks exactly like in Java. ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* As it is an expression it yields a value and is of some type.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("if (\'foo\'.length>3) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'never true!\'");
      _builder.newLine();
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'always true!\'");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("// always true! (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The else branch is optional and if not specified \'else null\' is ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* inferred:");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("if (\'foo\'.length>3) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'never true!\'");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("// null (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* This also means that control structure expressions like \'if\' can ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* occur wherever an expression is expected.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("if (if (\'foo\'.length>3) ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("false ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("else ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("true) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"Xbase doesn\'t need the ternary operator\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public String myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("String _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("int _length = \"foo\".length();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("boolean _greaterThan = (_length > 3);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (_greaterThan) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("/* \"never true!\" */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("} else {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("/* \"always true!\" */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("int _length_1 = \"foo\".length();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("boolean _greaterThan_1 = (_length_1 > 3);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (_greaterThan_1) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("/* \"never true!\" */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("String _xifexpression = null;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("boolean _xifexpression_1 = false;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("int _length_2 = \"foo\".length();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("boolean _greaterThan_2 = (_length_2 > 3);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (_greaterThan_2) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("_xifexpression_1 = false;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("} else {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("_xifexpression_1 = true;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (_xifexpression_1) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("_xifexpression = \"Xbase doesn\\\'t need the ternary operator\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = _xifexpression;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void operators() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import org.eclipse.xtext.purexbase.test.data.Amount");
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Although the operators in Xbase are syntactically predefined, the ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* semantics are given by a simple operator overloading mechanism.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Each operator maps to a certain method signature.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("val a = new Amount(\'12.80\')");
      _builder.newLine();
      _builder.append("val b = new Amount(\'0.20\')");
      _builder.newLine();
      _builder.newLine();
      _builder.append("a + b * 3");
      _builder.newLine();
      _builder.append("// 13.40 (Amount)");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import org.eclipse.xtext.purexbase.test.data.Amount;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public Amount myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Amount _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Amount a = new Amount(\"12.80\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Amount b = new Amount(\"0.20\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Amount _multiply = b.operator_multiply(3);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = a.operator_plus(_multiply);");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loops() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Xbase supports Java\'s while and do .. while as well as the new form ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* of the for loop. In Xbase these constructs are expressions not ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* statements. Anyway, they always result in \'null\' and are of type ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* \'void\'. ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("val list = newArrayList(\'foo\',\'bar\',\'baz\')");
      _builder.newLine();
      _builder.append("val result = new java.util.ArrayList<String>()");
      _builder.newLine();
      _builder.newLine();
      _builder.append("for (x : list.reverse) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("result += x.toUpperCase");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("result");
      _builder.newLine();
      _builder.append("// [BAZ, BAR, FOO] (ArrayList<String>)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("var i = 0");
      _builder.newLine();
      _builder.append("while(i<list.size) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("result += \'whiled-\'+list.get(i)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i = i+1");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("result");
      _builder.newLine();
      _builder.append("// [BAZ, BAR, FOO, whiled-baz, whiled-bar, whiled-foo] (ArrayList<String>)");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import java.util.List;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.ListExtensions;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public ArrayList<String> myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("ArrayList<String> _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\"foo\", \"bar\", \"baz\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final ArrayList<String> result = new ArrayList<String>();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("List<String> _reverse = ListExtensions.<String>reverse(list);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("for (final String x : _reverse) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("String _upperCase = x.toUpperCase();");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("result.add(_upperCase);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("/* result; */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("int i = 0;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("while ((i < list.size())) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("String _get = list.get(i);");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("String _plus = (\"whiled-\" + _get);");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("result.add(_plus);");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("i = (i + 1);");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = result;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void exceptions() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Xbase supports Exception handling using the same syntax as is used ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* in Java. There are two differences:");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* 1) Checked exceptions must not be catched in closures.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* 2) Try-catch is an expression and can therefore be used in a deeply ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*    nested way ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("(null as Object).toString");
      _builder.newLine();
      _builder.append("} catch (NullPointerException e) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("throw new RuntimeException(e)");
      _builder.newLine();
      _builder.append("} finally {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("// do nothing\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("// threw RuntimeException (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Note that within purexbase after you\'ve thrown an exception, the ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* interpreter will always result in the first thrown exception.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("null");
      _builder.newLine();
      _builder.append("// threw RuntimeException (Void)");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public Object myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Object _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("try {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("((Object) null).toString();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("} catch (final Throwable _t) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("if (_t instanceof NullPointerException) {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("final NullPointerException e = (NullPointerException)_t;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("throw new RuntimeException(e);");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("} else {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("throw Exceptions.sneakyThrow(_t);");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("} finally {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void switchExpression() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import org.eclipse.xtext.purexbase.test.data.Circle");
      _builder.newLine();
      _builder.append("import org.eclipse.xtext.purexbase.test.data.Rectangle");
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The switch expression is different and much more powerful than the");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* switch statement in Java.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* First it allows to switch over everything (not only primitives) and");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* it does not have a fall through logic. Also the order of cases is ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* important : First match wins!");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("val list = newArrayList(\'foo\',\'bar\',\'baz\')");
      _builder.newLine();
      _builder.append("switch(list.head) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("case \'foo\' : \"it\'s foo\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("case \'bar\' : \'a bar\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("default : \"don\'t know\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("// it\'s foo (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The type guards are a pragmatic variant of what people often do with");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* pattern matching in functional languages.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("val list2 = newArrayList(new Rectangle(5,5), new Circle(4), new Rectangle(6,8))");
      _builder.newLine();
      _builder.append("list2.map(shape | ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("switch (shape) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Circle \t: ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\'a circle : diameter=\'+shape.diameter");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Rectangle case shape.height == shape.width : ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\'a square : size=\'+shape.width");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Rectangle : ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\'a rectangle : width=\'+shape.width+\', height=\'+shape.height");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("// [a square : size=5, a circle : diameter=4, a rectangle : width=8 height=6] (List<String>)");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import com.google.common.base.Objects;");
      _builder_1.newLine();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import java.util.List;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.purexbase.test.data.Circle;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.purexbase.test.data.Rectangle;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.purexbase.test.data.Shape;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.ListExtensions;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public List<String> myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("List<String> _xblockexpression = null;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\"foo\", \"bar\", \"baz\");");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("String _head = IterableExtensions.<String>head(list);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("boolean _matched = false;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (Objects.equal(_head, \"foo\")) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("_matched=true;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("/* \"it\\\'s foo\" */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (!_matched) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("if (Objects.equal(_head, \"bar\")) {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("_matched=true;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("/* \"a bar\" */");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (!_matched) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("/* \"don\\\'t know\" */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Rectangle _rectangle = new Rectangle(5, 5);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Circle _circle = new Circle(4);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Rectangle _rectangle_1 = new Rectangle(6, 8);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final ArrayList<Shape> list2 = CollectionLiterals.<Shape>newArrayList(_rectangle, _circle, _rectangle_1);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Function1<Shape, String> _function = new Function1<Shape, String>() {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("public String apply(final Shape shape) {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("String _switchResult = null;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("boolean _matched = false;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("if (shape instanceof Circle) {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("_matched=true;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("_switchResult = (\"a circle : diameter=\" + Integer.valueOf(((Circle)shape).diameter));");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("if (!_matched) {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("if (shape instanceof Rectangle) {");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("if ((((Rectangle)shape).height == ((Rectangle)shape).width)) {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("_matched=true;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("_switchResult = (\"a square : size=\" + Integer.valueOf(((Rectangle)shape).width));");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("if (!_matched) {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("if (shape instanceof Rectangle) {");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("_matched=true;");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("_switchResult = (((\"a rectangle : width=\" + Integer.valueOf(((Rectangle)shape).width)) + \", height=\") + Integer.valueOf(((Rectangle)shape).height));");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("return _switchResult;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("_xblockexpression = ListExtensions.<Shape, String>map(list2, _function);");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _xblockexpression;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void typeCoercion() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* AUTOBOXING");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Xbase supports Java\'s primitives and also the autoboxing introduced");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* with Java 1.4.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("\'string\'.length");
      _builder.newLine();
      _builder.append("// 6 (int)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("val Integer i = \'string\'.length");
      _builder.newLine();
      _builder.append("i");
      _builder.newLine();
      _builder.append("// 6 (Integer)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* It does autoboxing even when used in the receiver context.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\'string\'.length.toString");
      _builder.newLine();
      _builder.append("// 6 (String)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Arrays are automatically coerced to Lists.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("\'string\'.toCharArray");
      _builder.newLine();
      _builder.append("// [C@388e28 (char[])");
      _builder.newLine();
      _builder.newLine();
      _builder.append("val java.util.List<Character> l = \'string\'.toCharArray");
      _builder.newLine();
      _builder.append("// [s, t, r, i, n, g] (void)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Again this works also in a receiver context.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\'string\'.toCharArray.get(3)");
      _builder.newLine();
      _builder.append("// i (Character)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Closure Coercion");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* A closure can be passed whenever a type is expected which has only defined ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* one method in addition to the ones inherited from java.lang.Object");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("val java.util.Comparator<String> comparator = [a,b| a.length.compareTo(b.length)]");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import java.util.Comparator;");
      _builder_1.newLine();
      _builder_1.append("import java.util.List;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.xtext.xbase.lib.Conversions;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public void myMethod() throws Throwable {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("\"string\".length();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("final Integer i = Integer.valueOf(\"string\".length());");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("/* i; */");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("int _length = \"string\".length();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Integer.valueOf(_length).toString();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("\"string\".toCharArray();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("final List<Character> l = (List<Character>)Conversions.doWrapArray(\"string\".toCharArray());");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("char[] _charArray = \"string\".toCharArray();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("/* _charArray[3]; */");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("final Comparator<String> _function = new Comparator<String>() {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("public int compare(final String a, final String b) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("int _length = a.length();");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("int _length_1 = b.length();");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("return Integer.valueOf(_length).compareTo(Integer.valueOf(_length_1));");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("final Comparator<String> comparator = _function;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
