«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::AntlrGrammar»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::Parser»

«DEFINE parser FOR Grammar»
«FILE getParserClassName().asPath()+".java" SRC_GEN-»
«fileHeader()»
package «getParserClassName().toJavaPackage()»;

«annotationImports()-»
import com.google.inject.Inject;

import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import «gaFQName()»;

«classAnnotations()»public class «getParserClassName().toSimpleName()» extends org.eclipse.xtext.parser.antlr.AbstractAntlrParser {
	
	@Inject
	private «gaSimpleName()» grammarAccess;
	
	@Override
	protected void setInitialHiddenTokens(XtextTokenStream tokenStream) {
		tokenStream.setInitialHiddenTokens(«FOREACH initialHiddenTokens() AS hidden SEPARATOR ", "»"«hidden»"«ENDFOREACH-»);
	}
	
	@Override
	protected «getInternalParserClassName()» createParser(XtextTokenStream stream) {
		return new «getInternalParserClassName()»(stream, getGrammarAccess());
	}
	
	@Override 
	protected String getDefaultRuleName() {
		return "«originalElement(allParserRules().first()).name»";
	}
	
	public «gaSimpleName()» getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(«gaSimpleName()» grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
}
«ENDFILE»
«ENDDEFINE»
