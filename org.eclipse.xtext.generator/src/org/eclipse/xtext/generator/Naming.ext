/*******************************************************************************
 * Copyright (c) 2008, 2009 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/

import org::eclipse::xtext;
import org::eclipse::xtext::generator;

String activatorName() :
	getNaming().activatorName();

String guiceModuleRtGenerated(Grammar g) : 
	getNaming().guiceModuleRtGenerated(g);
	
String guiceModuleRt(Grammar g) :
	getNaming().guiceModuleRt(g);
	
String guiceModuleUiGenerated(Grammar g) :
	getNaming().guiceModuleUiGenerated(g);
	
String guiceModuleUi(Grammar g) :
	getNaming().guiceModuleUi(g);
	
String setup(Grammar g) :
	getNaming().setup(g);
	
String setupImpl(Grammar g) :
	getNaming().setupImpl(g);
	
String executableExtensionFactory(Grammar g) :
	getNaming().executableExtensionFactory(g);
	
String asPath(String s) :
	getNaming().asPath(s);
	
String runtimePack(Grammar g)  :
	getNaming().basePackageRuntime(g);

String uiPackage(Grammar g)  :
	runtimePack(g)+".ui";
	
Naming getNaming() :
	GLOBALVAR __Naming__;
	
toJavaPackage(String fqName) :
	skipLastToken(fqName, '.');
	
toSimpleName(String fqName) :
	lastToken(fqName, '.');
	
String fileHeader() :
	getNaming().fileHeader();
	
String classAnnotations() :
	getNaming().classAnnotations();
	
String annotationImports() :
	getNaming().annotationImports();
	
private String skipLastToken(String s, String separator) :
	JAVA org.eclipse.xtext.util.Strings.skipLastToken(java.lang.String, java.lang.String);
	
private String lastToken(String s, String separator) :
	JAVA org.eclipse.xtext.util.Strings.lastToken(java.lang.String, java.lang.String);