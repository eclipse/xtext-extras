«REM»
/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::ui::generator::templates::CodetemplatesGeneratorFragment»
«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»


«DEFINE addToPluginXmlRt(boolean restriction, boolean hasIDE) FOR Grammar»«ENDDEFINE»

«DEFINE addToPluginXmlUi(boolean restriction, boolean hasIDE) FOR Grammar»«ENDDEFINE»

«DEFINE addToStandaloneSetup(boolean restriction, boolean hasIDE) FOR Grammar»«ENDDEFINE»

«DEFINE generate(boolean restriction, boolean hasIDE) FOR Grammar»
	«EXPAND PartialContentAssistParser(restriction, hasIDE)»
«ENDDEFINE»


«DEFINE PartialContentAssistParser(boolean restriction, boolean hasIDE) FOR Grammar»
«FILE partialParser().asPath()+".java" SRC_GEN_IDE-»
«fileHeader()»
package «partialParser().toJavaPackage()»;

«annotationImports()-»
import java.util.Collection;
import java.util.Collections;

import org.eclipse.xtext.AbstractRule;
«IF hasIDE-»
import org.eclipse.xtext.ide.editor.partialEditing.IPartialEditingContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
«ELSE-»
import org.eclipse.xtext.ui.codetemplates.ui.partialEditing.IPartialContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
«ENDIF-»
import org.eclipse.xtext.util.PolymorphicDispatcher;

/*
 * Template CodetemplatesGeneratorFragment.xpt
 */
«IF restriction-»
@SuppressWarnings("restriction")
«ENDIF-»
«classAnnotations()»public class «partialParser().toSimpleName()» extends «parser().toSimpleName()» implements «IF hasIDE»IPartialEditingContentAssistParser«ELSE»IPartialContentAssistParser«ENDIF» {

	private AbstractRule rule;

	@Override
	public void initializeFor(AbstractRule rule) {
		this.rule = rule;
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		if (rule == null || rule.eIsProxy())
			return Collections.emptyList();
		String methodName = "entryRule" + rule.getName();
		PolymorphicDispatcher<Collection<FollowElement>> dispatcher = 
			new PolymorphicDispatcher<Collection<FollowElement>>(methodName, 0, 0, Collections.singletonList(parser));
		dispatcher.invoke();
		return parser.getFollowElements();
	}

}
«ENDFILE»
«ENDDEFINE»