/*
 * generated by Xtext
 */
package org.eclipse.xtext.generator.parser.antlr.debug.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleAntlrGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AntlrGrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.AntlrGrammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrammarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsOptionsParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		
		//AntlrGrammar:
		//	'grammar' name=ID ';'
		//	options=Options?
		//	rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }

		//'grammar' name=ID ';'
		//options=Options?
		//rules+=Rule*
		public Group getGroup() { return cGroup; }

		//'grammar'
		public Keyword getGrammarKeyword_0() { return cGrammarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//options=Options?
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }

		//Options
		public RuleCall getOptionsOptionsParserRuleCall_3_0() { return cOptionsOptionsParserRuleCall_3_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0() { return cRulesRuleParserRuleCall_4_0; }
	}

	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOptionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionValuesOptionValueParserRuleCall_3_0 = (RuleCall)cOptionValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Options:
		//	{Options}
		//	'options' '{'
		//	optionValues+=OptionValue+
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Options}
		//'options' '{'
		//optionValues+=OptionValue+
		//'}'
		public Group getGroup() { return cGroup; }

		//{Options}
		public Action getOptionsAction_0() { return cOptionsAction_0; }

		//'options'
		public Keyword getOptionsKeyword_1() { return cOptionsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//optionValues+=OptionValue+
		public Assignment getOptionValuesAssignment_3() { return cOptionValuesAssignment_3; }

		//OptionValue
		public RuleCall getOptionValuesOptionValueParserRuleCall_3_0() { return cOptionValuesOptionValueParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OptionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OptionValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIdOrIntParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OptionValue:
		//	key=ID '=' value=IdOrInt ';';
		@Override public ParserRule getRule() { return rule; }

		//key=ID '=' value=IdOrInt ';'
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=IdOrInt
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//IdOrInt
		public RuleCall getValueIdOrIntParserRuleCall_2_0() { return cValueIdOrIntParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IdOrIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.IdOrInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdOrInt:
		//	ID | INT;
		@Override public ParserRule getRule() { return rule; }

		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFragmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFragmentFragmentKeyword_0_0 = (Keyword)cFragmentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyAlternativesParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rule:
		//	^fragment?='fragment'? name=ID ('[' parameters+=Parameter (',' parameters+=Parameter)* ']')? ':'
		//	body=Alternatives
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//^fragment?='fragment'? name=ID ('[' parameters+=Parameter (',' parameters+=Parameter)* ']')? ':'
		//body=Alternatives
		//';'
		public Group getGroup() { return cGroup; }

		//^fragment?='fragment'?
		public Assignment getFragmentAssignment_0() { return cFragmentAssignment_0; }

		//'fragment'
		public Keyword getFragmentFragmentKeyword_0_0() { return cFragmentFragmentKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('[' parameters+=Parameter (',' parameters+=Parameter)* ']')?
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//body=Alternatives
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Alternatives
		public RuleCall getBodyAlternativesParserRuleCall_4_0() { return cBodyAlternativesParserRuleCall_4_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=ID name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=ID name=ID
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Alternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGroupParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAlternativesGroupsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cGroupsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_1_1_1_0 = (RuleCall)cGroupsAssignment_1_1_1.eContents().get(0);
		
		//Alternatives RuleElement:
		//	Group ({Alternatives.groups+=current} ('|' groups+=Group)+)?;
		@Override public ParserRule getRule() { return rule; }

		//Group ({Alternatives.groups+=current} ('|' groups+=Group)+)?
		public Group getGroup() { return cGroup; }

		//Group
		public RuleCall getGroupParserRuleCall_0() { return cGroupParserRuleCall_0; }

		//({Alternatives.groups+=current} ('|' groups+=Group)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Alternatives.groups+=current}
		public Action getAlternativesGroupsAction_1_0() { return cAlternativesGroupsAction_1_0; }

		//('|' groups+=Group)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'|'
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }

		//groups+=Group
		public Assignment getGroupsAssignment_1_1_1() { return cGroupsAssignment_1_1_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_1_1_1_0() { return cGroupsGroupParserRuleCall_1_1_1_0; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Group");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGuardedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cGroupElementsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementsAtomParserRuleCall_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1.eContents().get(0);
		
		//Group RuleElement:
		//	Guarded | Atom ({Group.elements+=current} elements+=Atom+)?;
		@Override public ParserRule getRule() { return rule; }

		//Guarded | Atom ({Group.elements+=current} elements+=Atom+)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//Guarded
		public RuleCall getGuardedParserRuleCall_0() { return cGuardedParserRuleCall_0; }

		//Atom ({Group.elements+=current} elements+=Atom+)?
		public Group getGroup_1() { return cGroup_1; }

		//Atom
		public RuleCall getAtomParserRuleCall_1_0() { return cAtomParserRuleCall_1_0; }

		//({Group.elements+=current} elements+=Atom+)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{Group.elements+=current}
		public Action getGroupElementsAction_1_1_0() { return cGroupElementsAction_1_1_0; }

		//elements+=Atom+
		public Assignment getElementsAssignment_1_1_1() { return cElementsAssignment_1_1_1; }

		//Atom
		public RuleCall getElementsAtomParserRuleCall_1_1_1_0() { return cElementsAtomParserRuleCall_1_1_1_0; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOtherElementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cElementWithCardinalityElementAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cCardinalityAlternatives_0_1_1_0 = (Alternatives)cCardinalityAssignment_0_1_1.eContents().get(0);
		private final Keyword cCardinalityPlusSignKeyword_0_1_1_0_0 = (Keyword)cCardinalityAlternatives_0_1_1_0.eContents().get(0);
		private final Keyword cCardinalityAsteriskKeyword_0_1_1_0_1 = (Keyword)cCardinalityAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cCardinalityQuestionMarkKeyword_0_1_1_0_2 = (Keyword)cCardinalityAlternatives_0_1_1_0.eContents().get(2);
		private final RuleCall cRuleOptionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Atom RuleElement:
		//	OtherElement ({ElementWithCardinality.element=current} cardinality=('+' | '*' | '?'))? | RuleOptions;
		@Override public ParserRule getRule() { return rule; }

		//OtherElement ({ElementWithCardinality.element=current} cardinality=('+' | '*' | '?'))? | RuleOptions
		public Alternatives getAlternatives() { return cAlternatives; }

		//OtherElement ({ElementWithCardinality.element=current} cardinality=('+' | '*' | '?'))?
		public Group getGroup_0() { return cGroup_0; }

		//OtherElement
		public RuleCall getOtherElementParserRuleCall_0_0() { return cOtherElementParserRuleCall_0_0; }

		//({ElementWithCardinality.element=current} cardinality=('+' | '*' | '?'))?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{ElementWithCardinality.element=current}
		public Action getElementWithCardinalityElementAction_0_1_0() { return cElementWithCardinalityElementAction_0_1_0; }

		//cardinality=('+' | '*' | '?')
		public Assignment getCardinalityAssignment_0_1_1() { return cCardinalityAssignment_0_1_1; }

		//('+' | '*' | '?')
		public Alternatives getCardinalityAlternatives_0_1_1_0() { return cCardinalityAlternatives_0_1_1_0; }

		//'+'
		public Keyword getCardinalityPlusSignKeyword_0_1_1_0_0() { return cCardinalityPlusSignKeyword_0_1_1_0_0; }

		//'*'
		public Keyword getCardinalityAsteriskKeyword_0_1_1_0_1() { return cCardinalityAsteriskKeyword_0_1_1_0_1; }

		//'?'
		public Keyword getCardinalityQuestionMarkKeyword_0_1_1_0_2() { return cCardinalityQuestionMarkKeyword_0_1_1_0_2; }

		//RuleOptions
		public RuleCall getRuleOptionsParserRuleCall_1() { return cRuleOptionsParserRuleCall_1; }
	}

	public class OtherElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OtherElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNegatedElementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTildeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cElementAlternatives_0_2_0 = (Alternatives)cElementAssignment_0_2.eContents().get(0);
		private final RuleCall cElementParenthesizedParserRuleCall_0_2_0_0 = (RuleCall)cElementAlternatives_0_2_0.eContents().get(0);
		private final RuleCall cElementLiteralParserRuleCall_0_2_0_1 = (RuleCall)cElementAlternatives_0_2_0.eContents().get(1);
		private final RuleCall cPredicatedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Action cUntilElementLeftAction_3_1_0 = (Action)cGroup_3_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cRightAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cRightLiteralParserRuleCall_3_1_2_0 = (RuleCall)cRightAssignment_3_1_2.eContents().get(0);
		
		//OtherElement RuleElement:
		//	{NegatedElement} '~' element=(Parenthesized | Literal) | Predicated
		//	| Parenthesized
		//	| Literal ({UntilElement.left=current} '..' right=Literal)?;
		@Override public ParserRule getRule() { return rule; }

		//{NegatedElement} '~' element=(Parenthesized | Literal) | Predicated
		//| Parenthesized
		//| Literal ({UntilElement.left=current} '..' right=Literal)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NegatedElement} '~' element=(Parenthesized | Literal)
		public Group getGroup_0() { return cGroup_0; }

		//{NegatedElement}
		public Action getNegatedElementAction_0_0() { return cNegatedElementAction_0_0; }

		//'~'
		public Keyword getTildeKeyword_0_1() { return cTildeKeyword_0_1; }

		//element=(Parenthesized | Literal)
		public Assignment getElementAssignment_0_2() { return cElementAssignment_0_2; }

		//(Parenthesized | Literal)
		public Alternatives getElementAlternatives_0_2_0() { return cElementAlternatives_0_2_0; }

		//Parenthesized
		public RuleCall getElementParenthesizedParserRuleCall_0_2_0_0() { return cElementParenthesizedParserRuleCall_0_2_0_0; }

		//Literal
		public RuleCall getElementLiteralParserRuleCall_0_2_0_1() { return cElementLiteralParserRuleCall_0_2_0_1; }

		//Predicated
		public RuleCall getPredicatedParserRuleCall_1() { return cPredicatedParserRuleCall_1; }

		//Parenthesized
		public RuleCall getParenthesizedParserRuleCall_2() { return cParenthesizedParserRuleCall_2; }

		//Literal ({UntilElement.left=current} '..' right=Literal)?
		public Group getGroup_3() { return cGroup_3; }

		//Literal
		public RuleCall getLiteralParserRuleCall_3_0() { return cLiteralParserRuleCall_3_0; }

		//({UntilElement.left=current} '..' right=Literal)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//{UntilElement.left=current}
		public Action getUntilElementLeftAction_3_1_0() { return cUntilElementLeftAction_3_1_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_3_1_1() { return cFullStopFullStopKeyword_3_1_1; }

		//right=Literal
		public Assignment getRightAssignment_3_1_2() { return cRightAssignment_3_1_2; }

		//Literal
		public RuleCall getRightLiteralParserRuleCall_3_1_2_0() { return cRightLiteralParserRuleCall_3_1_2_0; }
	}

	public class GuardedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Guarded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGuardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardOrExpressionParserRuleCall_1_0 = (RuleCall)cGuardAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGuardedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGuardedParenthesizedParserRuleCall_5_0 = (RuleCall)cGuardedAssignment_5.eContents().get(0);
		
		//Guarded RuleElement:
		//	'{' guard=OrExpression '}' '?' '=>' guarded=Parenthesized;
		@Override public ParserRule getRule() { return rule; }

		//'{' guard=OrExpression '}' '?' '=>' guarded=Parenthesized
		public Group getGroup() { return cGroup; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//guard=OrExpression
		public Assignment getGuardAssignment_1() { return cGuardAssignment_1; }

		//OrExpression
		public RuleCall getGuardOrExpressionParserRuleCall_1_0() { return cGuardOrExpressionParserRuleCall_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//'?'
		public Keyword getQuestionMarkKeyword_3() { return cQuestionMarkKeyword_3; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }

		//guarded=Parenthesized
		public Assignment getGuardedAssignment_5() { return cGuardedAssignment_5; }

		//Parenthesized
		public RuleCall getGuardedParenthesizedParserRuleCall_5_0() { return cGuardedParenthesizedParserRuleCall_5_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} '||' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpression ({OrExpression.left=current} '||' right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OrExpression.left=current} '||' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }

		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	NotExpression ({AndExpression.left=current} '&&' right=NotExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//NotExpression ({AndExpression.left=current} '&&' right=NotExpression)*
		public Group getGroup() { return cGroup; }

		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }

		//({AndExpression.left=current} '&&' right=NotExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }

		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=NotExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//NotExpression
		public RuleCall getRightNotExpressionParserRuleCall_1_2_0() { return cRightNotExpressionParserRuleCall_1_2_0; }
	}

	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueNotExpressionParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//NotExpression Expression:
		//	PrimaryExpression | {NotExpression} '!' value=NotExpression;
		@Override public ParserRule getRule() { return rule; }

		//PrimaryExpression | {NotExpression} '!' value=NotExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{NotExpression} '!' value=NotExpression
		public Group getGroup_1() { return cGroup_1; }

		//{NotExpression}
		public Action getNotExpressionAction_1_0() { return cNotExpressionAction_1_0; }

		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//value=NotExpression
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//NotExpression
		public RuleCall getValueNotExpressionParserRuleCall_1_2_0() { return cValueNotExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceOrLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpression Expression:
		//	ParenthesizedExpression | ReferenceOrLiteral;
		@Override public ParserRule getRule() { return rule; }

		//ParenthesizedExpression | ReferenceOrLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_0() { return cParenthesizedExpressionParserRuleCall_0; }

		//ReferenceOrLiteral
		public RuleCall getReferenceOrLiteralParserRuleCall_1() { return cReferenceOrLiteralParserRuleCall_1; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression Expression:
		//	OPEN OrExpression ')';
		@Override public ParserRule getRule() { return rule; }

		//OPEN OrExpression ')'
		public Group getGroup() { return cGroup; }

		//OPEN
		public RuleCall getOPENTerminalRuleCall_0() { return cOPENTerminalRuleCall_0; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1() { return cOrExpressionParserRuleCall_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ReferenceOrLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ReferenceOrLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ReferenceOrLiteral:
		//	name=QName;
		@Override public ParserRule getRule() { return rule; }

		//name=QName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QName
		public RuleCall getNameQNameParserRuleCall_0() { return cNameQNameParserRuleCall_0; }
	}

	public class ParenthesizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Parenthesized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAlternativesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesized RuleElement:
		//	OPEN Alternatives ')';
		@Override public ParserRule getRule() { return rule; }

		//OPEN Alternatives ')'
		public Group getGroup() { return cGroup; }

		//OPEN
		public RuleCall getOPENTerminalRuleCall_0() { return cOPENTerminalRuleCall_0; }

		//Alternatives
		public RuleCall getAlternativesParserRuleCall_1() { return cAlternativesParserRuleCall_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PredicatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Predicated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateAlternativesParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementOtherElementParserRuleCall_5_0 = (RuleCall)cElementAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Predicated:
		//	OPEN OPEN predicate=Alternatives ')' '=>' element=OtherElement ')';
		@Override public ParserRule getRule() { return rule; }

		//OPEN OPEN predicate=Alternatives ')' '=>' element=OtherElement ')'
		public Group getGroup() { return cGroup; }

		//OPEN
		public RuleCall getOPENTerminalRuleCall_0() { return cOPENTerminalRuleCall_0; }

		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }

		//predicate=Alternatives
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//Alternatives
		public RuleCall getPredicateAlternativesParserRuleCall_2_0() { return cPredicateAlternativesParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }

		//element=OtherElement
		public Assignment getElementAssignment_5() { return cElementAssignment_5; }

		//OtherElement
		public RuleCall getElementOtherElementParserRuleCall_5_0() { return cElementOtherElementParserRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class RuleOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.RuleOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOptionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOptionsOptionsParserRuleCall_0_0_0 = (RuleCall)cOptionsAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementAtomParserRuleCall_0_2_0 = (RuleCall)cElementAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSkipAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cSkipKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//RuleOptions:
		//	options=Options ':' element=Atom
		//	| {Skip} '{' 'skip();' '}';
		@Override public ParserRule getRule() { return rule; }

		//options=Options ':' element=Atom
		//| {Skip} '{' 'skip();' '}'
		public Alternatives getAlternatives() { return cAlternatives; }

		//options=Options ':' element=Atom
		public Group getGroup_0() { return cGroup_0; }

		//options=Options
		public Assignment getOptionsAssignment_0_0() { return cOptionsAssignment_0_0; }

		//Options
		public RuleCall getOptionsOptionsParserRuleCall_0_0_0() { return cOptionsOptionsParserRuleCall_0_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//element=Atom
		public Assignment getElementAssignment_0_2() { return cElementAssignment_0_2; }

		//Atom
		public RuleCall getElementAtomParserRuleCall_0_2_0() { return cElementAtomParserRuleCall_0_2_0; }

		//{Skip} '{' 'skip();' '}'
		public Group getGroup_1() { return cGroup_1; }

		//{Skip}
		public Action getSkipAction_1_0() { return cSkipAction_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//'skip();'
		public Keyword getSkipKeyword_1_2() { return cSkipKeyword_1_2; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWildcardParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal RuleElement:
		//	RuleCall
		//	| Keyword
		//	| Wildcard;
		@Override public ParserRule getRule() { return rule; }

		//RuleCall
		//| Keyword
		//| Wildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleCall
		public RuleCall getRuleCallParserRuleCall_0() { return cRuleCallParserRuleCall_0; }

		//Keyword
		public RuleCall getKeywordParserRuleCall_1() { return cKeywordParserRuleCall_1; }

		//Wildcard
		public RuleCall getWildcardParserRuleCall_2() { return cWildcardParserRuleCall_2; }
	}

	public class RuleCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.RuleCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRuleIDTerminalRuleCall_0_0 = (RuleCall)cRuleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsOrExpressionParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsOrExpressionParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//RuleCall:
		//	rule=ID ('[' arguments+=OrExpression (',' arguments+=OrExpression)* ']')?;
		@Override public ParserRule getRule() { return rule; }

		//rule=ID ('[' arguments+=OrExpression (',' arguments+=OrExpression)* ']')?
		public Group getGroup() { return cGroup; }

		//rule=ID
		public Assignment getRuleAssignment_0() { return cRuleAssignment_0; }

		//ID
		public RuleCall getRuleIDTerminalRuleCall_0_0() { return cRuleIDTerminalRuleCall_0_0; }

		//('[' arguments+=OrExpression (',' arguments+=OrExpression)* ']')?
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//arguments+=OrExpression
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//OrExpression
		public RuleCall getArgumentsOrExpressionParserRuleCall_1_1_0() { return cArgumentsOrExpressionParserRuleCall_1_1_0; }

		//(',' arguments+=OrExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=OrExpression
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//OrExpression
		public RuleCall getArgumentsOrExpressionParserRuleCall_1_2_1_0() { return cArgumentsOrExpressionParserRuleCall_1_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Keyword");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Keyword:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Wildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Wildcard:
		//	{Wildcard} '.';
		@Override public ParserRule getRule() { return rule; }

		//{Wildcard} '.'
		public Group getGroup() { return cGroup; }

		//{Wildcard}
		public Action getWildcardAction_0() { return cWildcardAction_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	
	
	private final AntlrGrammarElements pAntlrGrammar;
	private final OptionsElements pOptions;
	private final OptionValueElements pOptionValue;
	private final IdOrIntElements pIdOrInt;
	private final RuleElements pRule;
	private final ParameterElements pParameter;
	private final AlternativesElements pAlternatives;
	private final GroupElements pGroup;
	private final AtomElements pAtom;
	private final OtherElementElements pOtherElement;
	private final GuardedElements pGuarded;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final NotExpressionElements pNotExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final ReferenceOrLiteralElements pReferenceOrLiteral;
	private final ParenthesizedElements pParenthesized;
	private final PredicatedElements pPredicated;
	private final RuleOptionsElements pRuleOptions;
	private final LiteralElements pLiteral;
	private final RuleCallElements pRuleCall;
	private final QNameElements pQName;
	private final KeywordElements pKeyword;
	private final WildcardElements pWildcard;
	private final TerminalRule tEMPTY_PAREN;
	private final TerminalRule tOPEN;
	private final TerminalRule tID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleAntlrGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAntlrGrammar = new AntlrGrammarElements();
		this.pOptions = new OptionsElements();
		this.pOptionValue = new OptionValueElements();
		this.pIdOrInt = new IdOrIntElements();
		this.pRule = new RuleElements();
		this.pParameter = new ParameterElements();
		this.pAlternatives = new AlternativesElements();
		this.pGroup = new GroupElements();
		this.pAtom = new AtomElements();
		this.pOtherElement = new OtherElementElements();
		this.pGuarded = new GuardedElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.pReferenceOrLiteral = new ReferenceOrLiteralElements();
		this.pParenthesized = new ParenthesizedElements();
		this.pPredicated = new PredicatedElements();
		this.pRuleOptions = new RuleOptionsElements();
		this.pLiteral = new LiteralElements();
		this.pRuleCall = new RuleCallElements();
		this.pQName = new QNameElements();
		this.pKeyword = new KeywordElements();
		this.pWildcard = new WildcardElements();
		this.tEMPTY_PAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.EMPTY_PAREN");
		this.tOPEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OPEN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AntlrGrammar:
	//	'grammar' name=ID ';'
	//	options=Options?
	//	rules+=Rule*;
	public AntlrGrammarElements getAntlrGrammarAccess() {
		return pAntlrGrammar;
	}
	
	public ParserRule getAntlrGrammarRule() {
		return getAntlrGrammarAccess().getRule();
	}

	//Options:
	//	{Options}
	//	'options' '{'
	//	optionValues+=OptionValue+
	//	'}';
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}

	//OptionValue:
	//	key=ID '=' value=IdOrInt ';';
	public OptionValueElements getOptionValueAccess() {
		return pOptionValue;
	}
	
	public ParserRule getOptionValueRule() {
		return getOptionValueAccess().getRule();
	}

	//IdOrInt:
	//	ID | INT;
	public IdOrIntElements getIdOrIntAccess() {
		return pIdOrInt;
	}
	
	public ParserRule getIdOrIntRule() {
		return getIdOrIntAccess().getRule();
	}

	//Rule:
	//	^fragment?='fragment'? name=ID ('[' parameters+=Parameter (',' parameters+=Parameter)* ']')? ':'
	//	body=Alternatives
	//	';';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Parameter:
	//	type=ID name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Alternatives RuleElement:
	//	Group ({Alternatives.groups+=current} ('|' groups+=Group)+)?;
	public AlternativesElements getAlternativesAccess() {
		return pAlternatives;
	}
	
	public ParserRule getAlternativesRule() {
		return getAlternativesAccess().getRule();
	}

	//Group RuleElement:
	//	Guarded | Atom ({Group.elements+=current} elements+=Atom+)?;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//Atom RuleElement:
	//	OtherElement ({ElementWithCardinality.element=current} cardinality=('+' | '*' | '?'))? | RuleOptions;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//OtherElement RuleElement:
	//	{NegatedElement} '~' element=(Parenthesized | Literal) | Predicated
	//	| Parenthesized
	//	| Literal ({UntilElement.left=current} '..' right=Literal)?;
	public OtherElementElements getOtherElementAccess() {
		return pOtherElement;
	}
	
	public ParserRule getOtherElementRule() {
		return getOtherElementAccess().getRule();
	}

	//Guarded RuleElement:
	//	'{' guard=OrExpression '}' '?' '=>' guarded=Parenthesized;
	public GuardedElements getGuardedAccess() {
		return pGuarded;
	}
	
	public ParserRule getGuardedRule() {
		return getGuardedAccess().getRule();
	}

	//OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} '||' right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression Expression:
	//	NotExpression ({AndExpression.left=current} '&&' right=NotExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//NotExpression Expression:
	//	PrimaryExpression | {NotExpression} '!' value=NotExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//PrimaryExpression Expression:
	//	ParenthesizedExpression | ReferenceOrLiteral;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ParenthesizedExpression Expression:
	//	OPEN OrExpression ')';
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//ReferenceOrLiteral:
	//	name=QName;
	public ReferenceOrLiteralElements getReferenceOrLiteralAccess() {
		return pReferenceOrLiteral;
	}
	
	public ParserRule getReferenceOrLiteralRule() {
		return getReferenceOrLiteralAccess().getRule();
	}

	//Parenthesized RuleElement:
	//	OPEN Alternatives ')';
	public ParenthesizedElements getParenthesizedAccess() {
		return pParenthesized;
	}
	
	public ParserRule getParenthesizedRule() {
		return getParenthesizedAccess().getRule();
	}

	//Predicated:
	//	OPEN OPEN predicate=Alternatives ')' '=>' element=OtherElement ')';
	public PredicatedElements getPredicatedAccess() {
		return pPredicated;
	}
	
	public ParserRule getPredicatedRule() {
		return getPredicatedAccess().getRule();
	}

	//RuleOptions:
	//	options=Options ':' element=Atom
	//	| {Skip} '{' 'skip();' '}';
	public RuleOptionsElements getRuleOptionsAccess() {
		return pRuleOptions;
	}
	
	public ParserRule getRuleOptionsRule() {
		return getRuleOptionsAccess().getRule();
	}

	//Literal RuleElement:
	//	RuleCall
	//	| Keyword
	//	| Wildcard;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//RuleCall:
	//	rule=ID ('[' arguments+=OrExpression (',' arguments+=OrExpression)* ']')?;
	public RuleCallElements getRuleCallAccess() {
		return pRuleCall;
	}
	
	public ParserRule getRuleCallRule() {
		return getRuleCallAccess().getRule();
	}

	//QName:
	//	ID ('.' ID)?;
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//Keyword:
	//	value=STRING;
	public KeywordElements getKeywordAccess() {
		return pKeyword;
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}

	//Wildcard:
	//	{Wildcard} '.';
	public WildcardElements getWildcardAccess() {
		return pWildcard;
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}

	//terminal EMPTY_PAREN:
	//	OPEN ')';
	public TerminalRule getEMPTY_PARENRule() {
		return tEMPTY_PAREN;
	} 

	//terminal OPEN:
	//	'(' WS*;
	public TerminalRule getOPENRule() {
		return tOPEN;
	} 

	//@Override
	//terminal ID:
	//	'$'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
