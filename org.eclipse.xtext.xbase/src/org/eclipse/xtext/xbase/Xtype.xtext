/*******************************************************************************
 * Copyright (c) 2010, 2017 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/

grammar org.eclipse.xtext.xbase.Xtype hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/xtext/xbase/Xtype"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

JvmTypeReference:
	JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	| XFunctionTypeRef;

ArrayBrackets :
	'[' ']'
;

XFunctionTypeRef:
	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;

JvmParameterizedTypeReference:
	type=[JvmType|QualifiedName] (
		=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
		(=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	)?;

JvmArgumentTypeReference returns JvmTypeReference:
	JvmTypeReference | JvmWildcardTypeReference;

JvmWildcardTypeReference:
	{JvmWildcardTypeReference} '?' (
	  constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	| constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	)?;

JvmUpperBound :
	'extends' typeReference=JvmTypeReference;

JvmUpperBoundAnded returns JvmUpperBound:
	'&' typeReference=JvmTypeReference;

JvmLowerBound :
	'super' typeReference=JvmTypeReference;

JvmLowerBoundAnded returns JvmLowerBound:
	'&' typeReference=JvmTypeReference;

JvmTypeParameter :
	name=ValidID
	(constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;

QualifiedName:
	ValidID ('.' ValidID)*;

QualifiedNameWithWildcard :
	QualifiedName  '.' '*';

ValidID:
	ID;

XImportSection:
	importDeclarations+=XImportDeclaration+;

XImportDeclaration:
	'import' (
		(static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
		| importedType=[JvmDeclaredType|QualifiedName]
		| importedNamespace=QualifiedNameWithWildcard) ';'?
;

QualifiedNameInStaticImport:
	(ValidID '.')+
;

terminal ID:
	'^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

terminal STRING:
			'"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
			"'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;

terminal ML_COMMENT: '/*' -> '*/';

terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
